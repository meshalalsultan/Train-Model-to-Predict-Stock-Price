# -*- coding: utf-8 -*-
"""Appl_LSTM_keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NB3sqYJOgAx1ANTiG41XKYOsjfLaVdCw
"""

import pandas as pd


data = pd.read_csv('pfe.csv' , header=0 , usecols = ['Date' , 'Close'] , parse_dates=True , index_col = 'Date')
print(data)

import matplotlib.pyplot as plt

plt.plot(data['Close'])
plt.show()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)
print(scaled_data)

train_length = int(len(scaled_data) * 0.7)
test_length = len(scaled_data) - train_length
train_data = scaled_data[0:train_length,:]
test_data = scaled_data[train_length:len(scaled_data),:]

print(train_data.shape)

import numpy as np

def create_dataset(dataset, timestep=1) :
  data_x , data_y = [] , []
  for i in range(len(dataset) - timestep - 1):
    data_x.append(dataset [i: (i + timestep) ,0])
    data_y.append(dataset [i + timestep , 0])
  return np.array(data_x) , np.array(data_y)

timestep =1
train_x , train_y = create_dataset(train_data,timestep)
test_x, test_y = create_dataset(test_data ,timestep)

print(train_x)

train_x.shape

train_x = np.reshape(train_x ,(train_x.shape[0] ,1,train_x.shape[1]))
test_x = np.reshape(test_x ,(test_x.shape[0] ,1,test_x.shape[1]))

print(train_x)

from keras.models import Sequential
from keras.layers import LSTM , Dense

model = Sequential()
model.add(LSTM(256, input_shape=(1,1)))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss ='mean_squared_error' , optimizer = 'adam' , metrics=['accuracy'])
print(model.summary())

model.fit(train_x , train_y , epochs=1 , batch_size=1 , verbose=1)
score = model.evaluate(train_x , train_y , verbose=0)
print('Keras model loss = ' , score[0])
print('Keras model accuracy = ' , score[1])

#Convert to redabul data
train_predection = model.predict(train_x)
test_predection = model.predict(test_x)

print(train_predection)

#Scaling
train_predection = scaler.inverse_transform(train_predection)
train_y = scaler.inverse_transform([train_y])

test_predection = scaler.inverse_transform(test_predection)
test_y = scaler.inverse_transform([test_y])

print(train_predection)

#Plot
train_predict_plot = np.empty_like(scaled_data)
train_predict_plot[:,:] =np.nan
train_predict_plot[1:len(train_predection)+1, :] = train_predection

test_predict_plot = np.empty_like(scaled_data)
test_predict_plot[:,:] =np.nan
test_predict_plot[len(train_predection)+2+1:len(scaled_data)-1, :] = test_predection

plt.plot(scaler.inverse_transform(scaled_data))
plt.plot(train_predict_plot)
plt.plot(test_predict_plot)
plt.show()

